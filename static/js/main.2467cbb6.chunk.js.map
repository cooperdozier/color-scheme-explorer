{"version":3,"sources":["images/random-palette-page-no-layout.png","images/configure-colors-page.png","images/layout-page.png","components/Project2/ColorManifest.js","components/Project2/TestingBlock.js","components/Project2/RandomizeColors.js","components/Project2/RandomizeLayout.js","components/Project2/ConfigureColors.js","components/Project2/HowToUse.js","components/App/App2.js","index.js"],"names":["module","exports","ColorManifest","props","color0a","backgroundColor","this","colorTags","color1a","color2a","color3a","color4a","color5a","color6a","color7a","color8a","color9a","color10a","colorBG","bgColorPrint","className","style","colrOrgId","Component","TestingBlock","backgroundDiv","position","height","width","groupOneDiv","borderColor","left","positionings","top","borderWidth","borderRadius","positionClass","groupTwoDiv","right","groupThreeDiv","groupOneH3","color","fontSize","fontFamily","textSettings","textAlign","fontWeight","fontStyle","groupOneP","groupTwoH3","groupTwoP","groupThreeH3","groupThreeP","id","headingText","paragraphText","RandomizeColors","state","value1","value2","handleChange2","bind","event","setState","target","value","onClick","randomizeColors","bgColor","bgWhite","bgBlack","onSubmit","fetchScheme","type","onChange","placeholder","colors","RandomizeLayout","shuffleLayout","shuffleText","getGibberish","ConfigureColors","value3","handleChange1","handleChange3","handleSubmit","handleBgSubmit","setAColor","preventDefault","bgSet","removedColorsList","removedColors","map","HowToUse","href","src","require","alt","App2","isLoggedIn","schemeProfile","min","maxPlus1","randomId","Math","floor","random","axios","url","method","then","response","data","schemes","schemeId","text_out","slice","replace","split","tempVars","textSettingsArray","shuffle","i","positionsArray","index","tempColors","removedColor","push","wholePage","document","querySelector","toString","setAttribute","element","basename","to","exact","path","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2467cbb6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/random-palette-page-no-layout.298dd17b.png\";","module.exports = __webpack_public_path__ + \"static/media/configure-colors-page.d3a41f29.png\";","module.exports = __webpack_public_path__ + \"static/media/layout-page.1bca8cb2.png\";","import React, { Component } from 'react'\n\nclass ColorManifest extends Component {\n    constructor(props) {\n        super()\n    }\n\n    render() {\n\n        let color0a = {backgroundColor: this.props.colorTags[0]}\n        let color1a = {backgroundColor: this.props.colorTags[1]}\n        let color2a = {backgroundColor: this.props.colorTags[2]}\n        let color3a = {backgroundColor: this.props.colorTags[3]}\n        let color4a = {backgroundColor: this.props.colorTags[4]}\n        let color5a = {backgroundColor: this.props.colorTags[5]}\n        let color6a = {backgroundColor: this.props.colorTags[6]}\n        let color7a = {backgroundColor: this.props.colorTags[7]}\n        let color8a = {backgroundColor: this.props.colorTags[8]}\n        let color9a = {backgroundColor: this.props.colorTags[9]}\n        let color10a = {backgroundColor: this.props.colorTags[10]}\n        let colorBG = {backgroundColor: this.props.bgColorPrint}\n        return (\n            <p className='colorManifest'>\n            0:&nbsp;{this.props.colorTags[0]}&nbsp;<span style={color0a}>_____</span> -\n            1:&nbsp;{this.props.colorTags[1]}&nbsp;<span style={color1a}>_____</span> -\n            2:&nbsp;{this.props.colorTags[2]}&nbsp;<span style={color2a}>_____</span> -\n            3:&nbsp;{this.props.colorTags[3]}&nbsp;<span style={color3a}>_____</span> -\n            4:&nbsp;{this.props.colorTags[4]}&nbsp;<span style={color4a}>_____</span> -\n            5:&nbsp;{this.props.colorTags[5]}&nbsp;<span style={color5a}>_____</span> -\n            6:&nbsp;{this.props.colorTags[6]}&nbsp;<span style={color6a}>_____</span> -\n            7:&nbsp;{this.props.colorTags[7]}&nbsp;<span style={color7a}>_____</span> -\n            8:&nbsp;{this.props.colorTags[8]}&nbsp;<span style={color8a}>_____</span> -\n            9:&nbsp;{this.props.colorTags[9]}&nbsp;<span style={color9a}>_____</span> -\n            10:&nbsp;{this.props.colorTags[10]}&nbsp;<span style={color10a}>_____</span> -\n            BG:&nbsp;{this.props.bgColorPrint}&nbsp;<span style={colorBG}>_____</span> -\n            Colr.Org ID: {this.props.colrOrgId}\n            </p>\n        )\n    }\n}\n\n\nexport default ColorManifest","import React, { Component } from 'react';\n\n// const databaseUrl = process.env.NODE_ENV === 'production' ? process.env.BACKEND_APP_URL : 'http://localhost:3000'\n\nclass TestingBlock extends Component {\n    constructor(props) {\n        super()\n    }\n    render() {\n        let backgroundDiv = {\n            backgroundColor: this.props.colorTags[0],\n            position: 'absolute',\n            height: '600px',\n            width: '750px',\n        }\n        // colors set via fetchScheme() or randomizeColors(), then setAColor(),\n        // and then the map function with colorTags in App2.js\n        // called by RandomizeColors.js\n        // or by user action ConfigureColors.js via setAColor() and colorTags\n\n        // left, top, width, height, borderWidth, borderRadius, and fontSize\n        // are all set by shuffleLayout() in App2.js\n        // called by RandomizeLayout.js\n\n        // fontFamily, textAlign, fontWeight, and fontStyle are all set by\n        // shuffleText in App2.js\n        // called by RandomizeLayout.js\n        let groupOneDiv = {\n            backgroundColor: this.props.colorTags[1],\n            borderColor: this.props.colorTags[7],\n            left: this.props.positionings[0],\n            top: this.props.positionings[1],\n            width: this.props.positionings[11],\n            height: this.props.positionings[12],\n            borderWidth: this.props.positionings[21],\n            borderRadius: this.props.positionings[22],\n            position: this.props.positionClass,\n        }\n        let groupTwoDiv = {\n            backgroundColor: this.props.colorTags[4],\n            borderColor: this.props.colorTags[6],\n            right: this.props.positionings[2],\n            top: this.props.positionings[3],\n            width: this.props.positionings[13],\n            height: this.props.positionings[14],\n            borderWidth: this.props.positionings[23],\n            borderRadius: this.props.positionings[24],\n            position: this.props.positionClass,\n        }\n        let groupThreeDiv = {\n            position: this.props.positionClass,\n            backgroundColor: this.props.colorTags[5],\n            borderColor: this.props.colorTags[7],\n            left: this.props.positionings[4],\n            top: this.props.positionings[5],\n            width: this.props.positionings[15],\n            height: this.props.positionings[16],\n            borderWidth: this.props.positionings[25],\n            borderRadius: this.props.positionings[26],\n        }\n        let groupOneH3 = {\n            color: this.props.colorTags[2],\n            fontSize: this.props.positionings[31],\n            fontFamily: this.props.textSettings[0],\n            textAlign: this.props.textSettings[6],\n            fontWeight: this.props.textSettings[12],\n            fontStyle: this.props.textSettings[18],\n        }\n        let groupOneP = {\n            color: this.props.colorTags[3],\n            fontSize: this.props.positionings[34],\n            fontFamily: this.props.textSettings[1],\n            textAlign: this.props.textSettings[7],\n            fontWeight: this.props.textSettings[13],\n            fontStyle: this.props.textSettings[19],\n        }\n        let groupTwoH3 = {\n            color: this.props.colorTags[10],\n            fontSize: this.props.positionings[32],\n            fontFamily: this.props.textSettings[2],\n            textAlign: this.props.textSettings[8],\n            fontWeight: this.props.textSettings[14],\n            fontStyle: this.props.textSettings[20],\n        }\n        let groupTwoP = {\n            color: this.props.colorTags[5],\n            fontSize: this.props.positionings[35],\n            fontFamily: this.props.textSettings[3],\n            textAlign: this.props.textSettings[9],\n            fontWeight: this.props.textSettings[15],\n            fontStyle: this.props.textSettings[21],\n        }\n        let groupThreeH3 = {\n            color: this.props.colorTags[8],\n            fontSize: this.props.positionings[33],\n            fontFamily: this.props.textSettings[4],\n            textAlign: this.props.textSettings[10],\n            fontWeight: this.props.textSettings[16],\n            fontStyle: this.props.textSettings[22],\n        }\n        let groupThreeP = {\n            color: this.props.colorTags[9],\n            fontSize: this.props.positionings[36],\n            fontFamily: this.props.textSettings[5],\n            textAlign: this.props.textSettings[11],\n            fontWeight: this.props.textSettings[17],\n            fontStyle: this.props.textSettings[23],\n        }\n\n        return (\n            <div style={backgroundDiv} className='backgroundDiv'>\n                <div style={groupOneDiv} className='testBlock' id=\"group1\">\n                    <h3 style={groupOneH3} className='testBlock capital'>{this.props.headingText[0]}</h3>\n                    <p style={groupOneP} className='testBlock'>\n                        {this.props.paragraphText[0]}</p>\n                </div>\n                <div style={groupTwoDiv} className='testBlock' id=\"group2\">\n                    <h3 style={groupTwoH3} className='testBlock capital'>{this.props.headingText[1]}</h3>\n                    <p style={groupTwoP} className='testBlock'>\n                        {this.props.paragraphText[1]}</p>\n                </div>\n                <div style={groupThreeDiv} className='testBlock' id=\"group3\">\n                    <h3 style={groupThreeH3} className='testBlock capital'>{this.props.headingText[2]}</h3>\n                    <p style={groupThreeP} className='testBlock'>\n                        {this.props.paragraphText[2]}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TestingBlock","import React, { Component } from 'react';\nimport ColorManifest from './ColorManifest';\nimport TestingBlock from './TestingBlock';\n\nclass RandomizeColors extends Component {\n    constructor(props) {\n        super();\n        this.state = {\n            value1: '',\n            value2: '',\n            bgColorPrint: '',\n        };\n        this.handleChange2 = this.handleChange2.bind(this);\n        // this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange2(event) {\n        this.setState({ value2: event.target.value });\n    }\n    // handleSubmit(event) {\n    //     this.props.setAColor(this.state.value2, this.state.value1)\n    //     event.preventDefault();\n    // }\n\n    render() {\n\n        return (\n            <div>\n                <button onClick={() => this.props.randomizeColors()}>Get random palette</button>\n                <button onClick={() => this.props.bgColor()}>Random background</button>\n                <button onClick={() => this.props.bgWhite()}>Whitish background</button>\n                <button onClick={() => this.props.bgBlack()}>Off-black background</button>\n                {/* <button onClick={() => bgBlack()}>Off-black background</button> */}\n                <br />\n                <form className=\"inline-form\" onSubmit={() => this.props.fetchScheme(this.state.value2)}>\n                    <label>\n                        Get scheme by colr.org ID#:\n                        <input type=\"number\" value={this.state.value2} onChange={this.handleChange2}\n                            placeholder='1-17650' />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n\n                {/* <button onClick={() => this.props.fetchScheme()}>Set Me</button> */}\n                <ColorManifest colorTags={this.props.colorTags} // positionings={this.props.positionings} \n                bgColorPrint={this.props.bgColorPrint} colrOrgId={this.props.colrOrgId} />\n                <TestingBlock colors={this.props.colors} colorTags={this.props.colorTags} positionings={this.props.positionings} \n                paragraphText={this.props.paragraphText} positionClass={this.props.positionClass} \n                textSettings={this.props.textSettings} headingText={this.props.headingText} />\n            </div>\n        )\n    }\n}\n\nexport default RandomizeColors","import React, { Component } from 'react';\nimport ColorManifest from './ColorManifest';\nimport TestingBlock from './TestingBlock';\n\nclass RandomizeLayout extends Component {\n    constructor(props) {\n        super();\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={() => this.props.shuffleLayout()}>Click for new layout</button>\n                <button onClick={() => this.props.shuffleText()}>Click for new text properties</button>\n                <button onClick={() => this.props.getGibberish()}>Click for new gibberish</button>\n                <ColorManifest colorTags={this.props.colorTags} // positionings={this.props.positionings} \n                bgColorPrint={this.props.bgColorPrint} colrOrgId={this.props.colrOrgId} />\n                <TestingBlock colorTags={this.props.colorTags} positionings={this.props.positionings}\n                    positionClass={this.props.positionClass} headingText={this.props.headingText}\n                    paragraphText={this.props.paragraphText} textSettings={this.props.textSettings} />\n            </div>\n        )\n    }\n}\n\nexport default RandomizeLayout;","import React, { Component } from 'react';\nimport ColorManifest from './ColorManifest';\nimport TestingBlock from './TestingBlock';\n\nclass ConfigureColors extends Component {\n    constructor(props) {\n        super();\n        this.state = {\n            value1: '',\n            value2: '',\n            value3: '',\n        };\n        this.handleChange2 = this.handleChange2.bind(this);\n        this.handleChange1 = this.handleChange1.bind(this);\n        this.handleChange3 = this.handleChange3.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleBgSubmit = this.handleBgSubmit.bind(this);\n    }\n    handleChange1(event) {\n        this.setState({ value1: event.target.value });\n    }\n    handleChange2(event) {\n        this.setState({ value2: event.target.value });\n    }\n    handleChange3(event) {\n        this.setState({ value3: event.target.value});\n    }\n    handleSubmit(event) {\n        this.props.setAColor(this.state.value2, this.state.value1)\n        event.preventDefault();\n    }\n    handleBgSubmit(event) {\n        this.props.bgSet(this.state.value3)\n        event.preventDefault();\n    }\n\n    render() {\n        let removedColorsList = this.props.removedColors.map((colors) => {\n            // let swatch = []\n            // let swatch = (`background-color: ${colors[1]}`)\n            return <li>{colors[0]} <span style={{backgroundColor: colors[1]}}>___</span></li>\n        })\n\n        return (\n            <div id=\"configWrapperDiv\">\n                <ul id=\"configHistoryDiv\">\n                    <h4>Removed Colors:</h4>\n                   {removedColorsList}\n                </ul>\n                \n                {/* <ul id=\"bgColorDiv\">\n                    <h4>Background Color:</h4>\n                    {this.props.bgColorPrint}\n                </ul> */}\n                \n                <form className='lineUp' onSubmit={this.handleSubmit}>\n                    <label>\n                        Slot to set?\n                        <input type=\"number\" value={this.state.value1} onChange={this.handleChange1}\n                            placeholder='Num 0-10' />\n                    </label>\n                    <label>\n                        Color to set it to?\n                        <input type=\"text\" value={this.state.value2} onChange={this.handleChange2}\n                            placeholder='six digit hexadecimal' />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n                <form className='lineUp' onSubmit={this.handleBgSubmit}>\n                    <label>\n                        Set background color:\n                        <input type=\"text\" value={this.state.value3} onChange={this.handleChange3}\n                            placeholder='six digit hexadecimal' />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" onSubmit={this.handleBgSubmit} />\n                </form>\n                {/* <button className='lineUp' onClick={() => this.props.saveScheme()}>saveScheme</button> */}\n\n                <ColorManifest colorTags={this.props.colorTags} positionings={this.props.positionings}\n                bgColorPrint={this.props.bgColorPrint} colrOrgId={this.props.colrOrgId} />\n                <TestingBlock colorTags={this.props.colorTags} positionings={this.props.positionings}\n                    paragraphText={this.props.paragraphText} positionClass={this.props.positionClass} \n                    textSettings={this.props.textSettings} headingText={this.props.headingText} />\n            </div>\n        )\n    }\n}\n\nexport default ConfigureColors;","import React, { Component } from 'react';\n\n\nclass HowToUse extends Component {\n    constructor (props) {\n        super();\n    }\n    render () {\n        return (\n            <div>\n                <h1>Color Scheme Explorer</h1>\n                <p className='basicText'>Test random color schemes and build your custom color scheme against\n                    different backgrounds, texts, and text and layout properties. Random schemes\n                    by ID# and loading schemes by ID# from <a href=\"http://www.colr.org\">Colr.org</a>.\n                    Ipsum/Gibberish from <a href=\"https://www.randomtext.me\">Randomtext.me</a>.\n                    Check out the source at my <a href=\"https://github.com/cooperdozier/color-scheme-explorer\">Github Repository</a>.\n                </p>\n                <h2 className='otherh4'>Screenshot of 'Randomize Colors' with Default Text &amp; Layout Properties</h2>\n                <img src={require(\"../../images/random-palette-page-no-layout.png\")} alt=\"\" />\n                <h2 className='otherh4'>Screenshot of 'Configure Colors' with Randomized Texts, H3's, P's</h2>\n                <img src={require(\"../../images/configure-colors-page.png\")} alt=\"\" />\n                <h2 className='otherh4'>Screenshot of 'Randomize Page'</h2>\n                <img src={require(\"../../images/layout-page.png\")} alt=\"\" />\n                \n                {/* <p className='basicText'>This is an app for exploring color schemes. The Randomize by Color Scheme page will get \n                    a random user submitted color scheme from <a href=\"http://colr.org\">colr.org</a> of 2 to 10 colors. \n                    The Randomize Layout page uses JavaScript to randomize spacing and element sizes and weights within \n                    certain bounds, as well as to set shuffled paragraph text from\n                    <a href=\"http://randomtext.me/\">randomtext.me</a>. The Configure Colors pages allows you to set \n                    colors one at a time to the page and prints the deleted colors' hex values at the top left. The \n                    changes made with each function will persist when switching functions until the browser tab is closed \n                    or reloaded</p>\n                    <p>Note: If you run the browser extension Ghostery, you will need to pause the\n                        extension in order for the color scheme randomization to work. I have not tested it\n                        against regular ad-blockers or other extensions.\n                    </p>\n                    <h4 className='otherh4' >Screenshot of the Configure Colors function</h4>\n                    <img src={require(\"./configure-colors.jpg\")} alt=\"screenshot of configure colors page\" /> */}\n            </div>\n        )\n    }\n}\n\nexport default HowToUse;","import '../../Reset.css'\nimport React, { Component } from 'react';\nimport './App2.css';\nimport axios from 'axios';\nimport RandomizeColors from '../Project2/RandomizeColors';\nimport RandomizeLayout from '../Project2/RandomizeLayout';\nimport ConfigureColors from '../Project2/ConfigureColors';\nimport HowToUse from '../Project2/HowToUse';\n\nimport {\n  HashRouter as Router,\n  Route,\n  Link\n} from 'react-router-dom';\n\nclass App2 extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      colors: [],\n      positionings: [],\n      positionClass: 'static',\n      removedColors: [],\n      paragraphText: '',\n      headingText: '',\n      bgColorPrint: '#FAEBD7',\n      colrOrgId: 'none',\n      textSettings: [],\n      isLoggedIn: false,\n      schemeProfile: [],\n      colorTags: []\n    }\n    this.randomizeColors = this.randomizeColors.bind(this)\n    this.shuffleLayout = this.shuffleLayout.bind(this)\n    this.setAColor = this.setAColor.bind(this)\n    this.getGibberish = this.getGibberish.bind(this)\n    this.bgColor = this.bgColor.bind(this)\n    this.bgWhite = this.bgWhite.bind(this)\n    this.bgBlack = this.bgBlack.bind(this)\n    this.fetchScheme = this.fetchScheme.bind(this)\n    this.shuffleText = this.shuffleText.bind(this)\n    this.bgSet = this.bgSet.bind(this)\n  }\n\n  // uncomment for production\n  componentDidMount() {\n    this.getGibberish()\n    this.randomizeColors()\n  }\n\n  randomizeColors() {\n    function shuffle(min, maxPlus1) { return Math.floor(Math.random() * (maxPlus1 - min)) + min }\n    let randomId = shuffle(0,17649);\n    axios({\n      url: `https://cors-anywhere.herokuapp.com/http://www.colr.org/json/scheme/${randomId}`,\n      method: 'get'\n    })\n      .then(response => {\n        this.setState({\n          colors: response.data.schemes[0].colors,\n          colrOrgId: response.data.schemes[0].id\n        })\n        // localStorage.setItem('testStuff',response.data.schemes[0].colors)\n      })\n  }\n\n  fetchScheme(schemeId) {\n    axios({\n      url: `https://cors-anywhere.herokuapp.com/http://www.colr.org/json/scheme/${schemeId}`,\n      method: 'get'\n    })\n      .then(response => {\n        this.setState({\n          colors: response.data.schemes[0].colors,\n          colrOrgId: response.data.schemes[0].id\n        })\n        // localStorage.setItem('testStuff',response.data.schemes[0].colors)\n      })\n  }\n\n  getGibberish() {\n    axios({\n      url: 'https://cors-anywhere.herokuapp.com/https://www.randomtext.me/api/giberish/p-3/15-75',\n      method: 'get'\n    })\n      .then(response => {\n        this.setState({\n          // remove <p> tags, but not </p> tags, in .replace()\n          // https://stackoverflow.com/questions/24302485/remove-p-tags-regular-expression-regex\n          paragraphText: response.data.text_out.slice(3, -5).replace(/<p[^>]*>/g, \"\").split('</p>'),\n        })\n      })\n    axios({\n      url: 'https://cors-anywhere.herokuapp.com/https://www.randomtext.me/api/giberish/p-3/1-10',\n      method: 'get'\n    })\n      .then(response => {\n        this.setState({\n          // randomtext.me doesnt support multiples of h1 tags and we dont want the tags anyway\n          headingText: response.data.text_out.slice(3, -6).replace(/<p[^>]*>/g, \"\").split('</p>'),\n        })\n      })\n  }\n\n  shuffleText() {\n    let tempVars = [];\n    let textSettingsArray = [];\n    // for each of 3 h3's and 3 p's\n    // 0-3 of values monospace, serif, sans-serif, cursive/handwriting\n    // 0-3 of values text-align: left, center, right, justify\n    // 0-1 of values font-weight: normal, bold \n    // 0-1 of values font-style: italic, normal\n    // 24 total properties to set out of 12 possible values\n    function shuffle(min, maxPlus1) { return Math.floor(Math.random() * (maxPlus1 - min)) + min }\n    // get 6 random numbers from 0-7\n    for (let i = 0; i < 6; i++) {\n      tempVars[i] = shuffle(0, 8)\n    }\n    // get 6 random numbers from 0-3\n    for (let i = 6; i < 12; i++) {\n      tempVars[i] = shuffle(0, 4)\n    }\n    // get 12 random number from 0-2\n    for (let i = 12; i < 24; i++) {\n      tempVars[i] = shuffle(0, 3)\n    }\n    // set six random values for font-family\n    for (let i = 0; i < 6; i++) {\n      switch (tempVars[i]) {\n        case 0:\n        case 4:\n          textSettingsArray[i] = \"'overpass_monoregular','monospace'\";\n          break;\n        case 1:\n        case 5:\n          textSettingsArray[i] = \"'comprehensionsemibold','serif'\";\n          break;\n        case 2:\n        case 6:\n          textSettingsArray[i] = \"'encode_sansregular','sans-serif'\";\n          break;\n        case 3:\n          textSettingsArray[i] = \"'amitaregular','cursive'\";\n          break;\n        case 7:\n          textSettingsArray[i] = \"'belligerent_madnessregular','sans-serif'\";\n          break;\n        default:\n          textSettingsArray[i] = 'monospace';\n          break;\n      }\n    }\n    // set six random values for text-align\n    for (let i = 6; i < 12; i++) {\n      switch (tempVars[i]) {\n        case 0:\n          textSettingsArray[i] = 'left';\n          break;\n        case 1:\n          textSettingsArray[i] = 'center';\n          break;\n        case 2:\n          textSettingsArray[i] = 'right';\n          break;\n        case 3:\n          textSettingsArray[i] = 'justify';\n          break;\n        default:\n          textSettingsArray[i] = 'center';\n          break;\n      }\n    }\n    // set 6 random values for font-weight\n    for (let i = 12; i < 18; i++) {\n      switch (tempVars[i]) {\n        case 0:\n        case 2:\n          textSettingsArray[i] = 'normal';\n          break;\n        case 1:\n          textSettingsArray[i] = 'bold';\n          break;\n        default:\n          textSettingsArray[i] = 'bold';\n          break;\n      }\n    }\n    // set 6 random values for font-style\n    for (let i = 18; i < 24; i++) {\n      switch (tempVars[i]) {\n        case 0:\n        case 2:\n          textSettingsArray[i] = 'normal';\n          break;\n        case 1:\n          textSettingsArray[i] = 'italic';\n          break;\n        default:\n          textSettingsArray[i] = 'normal';\n          break;\n      }\n    }\n    // set generated values to state\n    this.setState({\n      textSettings: textSettingsArray,\n    })\n  }\n\n\n  shuffleLayout() {\n    let positionsArray = []\n    function shuffle(min, maxPlus1) { return Math.floor(Math.random() * (maxPlus1 - min)) + min }\n\n    for (let i = 0; i < 10; i++) {\n      positionsArray[i] = shuffle(-10, 80) + '%'\n    }\n    for (let i = 11; i < 20; i++) {\n      positionsArray[i] = shuffle(15, 65) + '%'\n    }\n    for (let i = 21; i < 30; i++) {\n      positionsArray[i] = shuffle(2, 17) + 'px'\n    }\n    for (let i = 31; i < 33; i++) {\n      positionsArray[i] = shuffle(17, 30) + 'px'\n    }\n    for (let i = 34; i < 36; i++) {\n      positionsArray[i] = shuffle(10, 22) + 'px'\n    }\n    this.setState({\n      positionings: positionsArray,\n      positionClass: 'absolute',\n    })\n  }\n\n  setAColor(color, index) {\n    let tempColors = this.state.colors\n    let removedColor = tempColors[index]\n    let removedColors = this.state.removedColors\n    removedColors.push([`${index}: #${removedColor}`, `#${removedColor}`])\n    tempColors[index] = color\n    this.setState({\n      colors: tempColors,\n      removedColors: removedColors,\n    })\n  }\n\n// Sets background and BG fields in ColorManifest to a pseudo-random hex number\n// bgColorPrint sets the manifest\n// 16,777,216 is the total count of values possible in a 6-digit hexadecimal sequence\n// bgColor is set to the <body> as a background attribute\n// triggered by 'Random Background' button in 'Randomize Palette' component\n  bgColor() {\n    let wholePage = document.querySelector('body')\n    let bgColor = '#' + (Math.floor(Math.random() * 16777216)).toString(16)\n    wholePage.setAttribute('style', `background-color: ${bgColor}`)\n    this.setState({\n      bgColorPrint: bgColor\n    })\n  }\n// Sets BG fields in ColorManifest to #FAEBD7\n// bgColorPrint sets the manifest\n// sets a standard off-white to page background for calibration/comparison\n// triggered by 'Whitish background' button in 'Randomize Palette' component\n// to set a pure white background, set ffffff to 'Set Background Color' field in 'Configure Colors' component and press submit\n  bgWhite() {\n    let wholePage = document.querySelector('body')\n    wholePage.setAttribute('style', 'background-color: #FAEBD7')\n    this.setState({\n      bgColorPrint: '#FAEBD7'\n    })\n  }\n// Sets BG fields in ColorManifest to #050812\n// bgColorPrint sets the manifest\n// sets a standard off-black to page background for calibration/comparison\n// triggered by 'Off-black background' button in 'Randomize Palette' component\n// to set a pure black background, set 000000 to 'Set background color' field in 'Configure Colors' component and press submit\n  bgBlack() {\n    let wholePage = document.querySelector('body')\n    wholePage.setAttribute('style', 'background-color: #050812;')\n    this.setState({\n      bgColorPrint: '#050812'\n    })\n  }\n// Sets BG fields in ColorManifest to value3\n// bgColorPrint sets the manifest\n// Sets a user-defined value for <body> background-color\n// value3 comes from the 'Set background color' field in the 'Configure Colors' component\n  bgSet(value3) {\n    let wholePage = document.querySelector('body')\n    let bgColor = '#' + value3\n    wholePage.setAttribute('style', `background-color: ${bgColor}`)\n    this.setState({\n      bgColorPrint: bgColor\n    })\n  }\n\n\n  \n  render() {\n    let colorTags = this.state.colors.map((element) => { return `#${element}` })\n    let positionings = this.state.positionings\n    let positionClass = this.state.positionClass\n    let paragraphText = this.state.paragraphText\n    let textSettings = this.state.textSettings\n\n    return (\n\n      <Router basename='/'>\n        <div className=\"App\">\n          <nav>\n            <Link to=\"/\">About</Link>\n            <Link to=\"/randomize-colors\">Randomize Palette</Link>\n            <Link to=\"/randomize-layout\">Randomize Page</Link>\n            <Link to=\"/configure-colors\">Configure Colors</Link>\n          </nav>\n          <Route exact path=\"/\" component={HowToUse} />\n          <Route path=\"/randomize-colors\">\n            <RandomizeColors\n              colors={this.state.colors}\n              colorTags={colorTags}\n              positionings={positionings}\n              positionClass={positionClass}\n              paragraphText={paragraphText}\n              randomizeColors={this.randomizeColors}\n              bgColor={this.bgColor}\n              bgWhite={this.bgWhite}\n              bgBlack={this.bgBlack}\n              fetchScheme={this.fetchScheme}\n              textSettings={textSettings}\n              headingText={this.state.headingText}\n              bgColorPrint={this.state.bgColorPrint}\n              colrOrgId={this.state.colrOrgId} \n              />\n          </Route>\n          <Route path=\"/randomize-layout\">\n            <RandomizeLayout\n              colorTags={colorTags}\n              positionings={positionings}\n              positionClass={positionClass}\n              shuffleLayout={this.shuffleLayout}\n              paragraphText={paragraphText}\n              textSettings={textSettings}\n              shuffleText={this.shuffleText}\n              headingText={this.state.headingText}\n              bgColorPrint={this.state.bgColorPrint}\n              colrOrgId={this.state.colrOrgId} \n              getGibberish={this.getGibberish}\n              />\n          </Route>\n          <Route path=\"/configure-colors\">\n            <ConfigureColors\n              colorTags={colorTags}\n              positionings={positionings}\n              positionClass={positionClass}\n              paragraphText={paragraphText}\n              bgColorPrint={this.state.bgColorPrint}\n              removedColors={this.state.removedColors}\n              setAColor={this.setAColor}\n              textSettings={textSettings}\n              headingText={this.state.headingText}\n              colrOrgId={this.state.colrOrgId} \n              bgSet={this.bgSet}\n              />\n          </Route>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App2;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App2 from './components/App/App2';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App2 />\n\n    </Router>,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}